# VLE Branch Instructions
:e_bdnz is $(ISVLE) & OP=4 & LK0_VLE=0 {
    CTR = CTR - 1;
    if (CTR != 0) goto [offset];
    # VLE branch if decrement CTR non-zero
}

:e_beq is $(ISVLE) & OP=4 & LK0_VLE=1 {
    if (CR0_EQ == 1) goto [offset];
    # VLE branch if equal
}

:e_bge is $(ISVLE) & OP=4 & LK0_VLE=2 {
    if (CR0_GE == 1) goto [offset];
    # VLE branch if greater or equal
}

:e_bgt is $(ISVLE) & OP=4 & LK0_VLE=3 {
    if (CR0_GT == 1) goto [offset];
    # VLE branch if greater than
}

:e_ble is $(ISVLE) & OP=4 & LK0_VLE=4 {
    if (CR0_LE == 1) goto [offset];
    # VLE branch if less or equal
}

:e_blt is $(ISVLE) & OP=4 & LK0_VLE=5 {
    if (CR0_LT == 1) goto [offset];
    # VLE branch if less than
}

:e_bne is $(ISVLE) & OP=4 & LK0_VLE=6 {
    if (CR0_EQ == 0) goto [offset];
    # VLE branch if not equal
}

# SE Branch Instructions
:se_beq is $(ISVLE) & OP=1 & LK0_VLE=0 {
    if (CR0_EQ == 1) goto [offset];
    # SE branch if equal
}

:se_bge is $(ISVLE) & OP=1 & LK0_VLE=1 {
    if (CR0_GE == 1) goto [offset];
    # SE branch if greater or equal
}

:se_bgt is $(ISVLE) & OP=1 & LK0_VLE=2 {
    if (CR0_GT == 1) goto [offset];
    # SE branch if greater than
}

:se_ble is $(ISVLE) & OP=1 & LK0_VLE=3 {
    if (CR0_LE == 1) goto [offset];
    # SE branch if less or equal
}

:se_blt is $(ISVLE) & OP=1 & LK0_VLE=4 {
    if (CR0_LT == 1) goto [offset];
    # SE branch if less than
}

:se_bne is $(ISVLE) & OP=1 & LK0_VLE=5 {
    if (CR0_EQ == 0) goto [offset];
    # SE branch if not equal
}
